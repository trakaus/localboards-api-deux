//
module.exports = {
	self: this,
	
	paths: [
		{ 
			name: 'states',
			resources: [
				{
					httpMethod: 'GET',
					uris: [
						{
							uri: '/states', 
							method: 'routes.States.list', 
							args: []
						}, { 
							uri: '/states/:state_identifier', 
							method: 'routes.States.single', 
							args: ['state_identifier']
						}, { 
							uri: '/states/:state_identifier/cities', 
							method: 'routes.States.childResource', 
							args: ['state_identifier','child_resource']
						}, { 
							uri: '/states/:state_identifier/cities/:city_identifier', 
							method: 'routes.States.childResource', 
							args: ['state_identifier','city_identifier']
						}
					]
				}, {
					httpMethod: 'PUT',
					uris: [
						{
							uri: '/states/:state_identifier/cities', 
							method: 'States.update', 
							args: ['identifier','child_resource']
						}
					]
				}, {
					httpMethod: 'POST',
					uris: [
						{	uri: '/states/:state_identifier/cities', 
							method: 'States.childResource', 
							args: ['identifier','child_resource']
						}
					]
				}, {
					httpMethod: 'DELETE',
					uris: [
						// do not allow any states to be deleted.
					]
				}
			]
		}, {
			name: 'cities',
			resources: []
		}, {
			name: 'counties',
			resources: []
		}, {
			name: 'departments',
			resources: []
		}, {
			name: 'boards',
			resources: [],
			children: [{
				name: 'seats',
				resources: [],
				children: [{
					name: 'open',
					resources: []
				}, {
					name: 'occupied',
					resources: []
				}]
			}]
		}, {
			name: 'members',
			resources: []
		}
	],
	
	dispatch: function( request, response, callback ) {
		console.log( 'params: ' + JSON.stringify(request.params) );
		response.contentType = 'json';
		response.send(200, {thank_you:'Thank you for your help!'});
		return callback();
	},
	
	States: {
		list: function( request, response, callback ) {
			console.log('States.list was executed!');
			module.exports.dispatch(request, response, callback());
		},
		
		single: function( request, response, callback ) {
			var id = request.params.state_identifier;
			
			if( isNaN(id) ) {
				console.log('State[' + id + ']: is a string!');
			} else if( Number(id) >= 0 ) {
				console.log('State[' + id + ']: is a number!');
			} else {
				var objType = typeof id;
				return callback({error: 'InvalidArgumentError', message: 'Handler for type( ' + objType + ') not found!'});
			}

			module.exports.dispatch(request, response, callback());
		},
		
		childResource: function( request, response, callback ) {
			var id = request.params.state_identifier;
			var childid = request.params.city_identifier;
			
			console.log('State[' + id + ']: child resource path: ' + childid);
			module.exports.dispatch(request, response, callback());
		}
	}
};

console.log('routes was located!');